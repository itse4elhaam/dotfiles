
[user]
	name = Elhaam
	email = e4elhaam@gmail.com
  # todo: add your signing key here
# [commit]
#     gpgSign = true

[credential]
	helper = store
[alias]
	cm = !git commit -m
	ca = !git commit --amend
  atpc = "!git add -A && git commit --amend"
  atpp = "!git add -A && git commit --amend && git push --force-with-lease origin $(git symbolic-ref --short HEAD)"
	ac = !git add -A && git commit -m
	cmp = "!f() { git commit -m \"$1\" && git push origin $(git symbolic-ref --short HEAD); }; f"	
	acp = "!f() { git add -A && git commit -m \"$1\" && git push origin $(git symbolic-ref --short HEAD); }; f"	
	cp = "!f() { git commit -m \"$1\" && git push origin $(git symbolic-ref --short HEAD); }; f"	
  acpd = "!f() { git add . && git commit -m \"$1 $(date '+%Y-%m-%d %H:%M:%S')\" && git push origin $(git symbolic-ref --short HEAD); }; f"
	pom = push origin master
	po = push origin
	pl = pull origin
	st = status -sb
	s = status
	co = checkout
	br = branch --format='%(HEAD) %(color:yellow)%(refname:short)%(color:reset) - %(contents:subject) %(color:green)(%(committerdate:relative)) [%(authorname)]' --sort=-committerdate
	sl = shortlog
	ll = log --oneline --decorate
	last = log -1 HEAD --stat
	fo = fetch origin
	fa = fetch --all
	rh = reset --hard
	rho = "!git reset --hard origin/$(git symbolic-ref --short HEAD)"
  rha = "!git add. && reset --soft"
	rs = reset --soft
	plc = "!git pull origin $(git symbolic-ref --short HEAD)"
	poc = "!git push origin $(git symbolic-ref --short HEAD)"
	pocf = "!git push origin $(git symbolic-ref --short HEAD) --force-with-lease"
  cbr = "!f() { echo 'Current branch:' && git rev-parse --abbrev-ref HEAD && git rev-parse --abbrev-ref HEAD | xclip -selection clipboard; }; f"
  lbr = "!f() { LAST=$(git rev-parse --abbrev-ref @{-1}); echo \"Last branch: $LAST\"; echo -n \"$LAST\" | xclip -selection clipboard; }; f"
  ahead-of = "!f() { git log --oneline \"$1..HEAD\"; }; f"
  fprs= fetch origin '+refs/pull/*/head:refs/remotes/origin/pull/*'
  unpushed = log @{u}..
  stp = stash pop
  cbb = "!git checkout -b bak/$(git rev-parse --abbrev-ref HEAD) && git checkout -"
  dbb = "!git branch -D bak/$(git rev-parse --abbrev-ref HEAD)"
  mel = "!git merge -"
  # checkouts to main branch
  com = "!git checkout $(for b in main master trunk release production prod stable; do git branch --list $b; done | head -n 1 | xargs)"
  # checkouts to dev branch
  cod = "!git checkout $(for b in dev develop development stg staging ; do git branch --list $b; done | head -n 1 | xargs)"
  col = "!git checkout -"
  sync = "!git pull origin $(git symbolic-ref --short HEAD) && git push origin $(git symbolic-ref --short HEAD)"
  wip = !git add -A && git commit -m "WIP"
  undo = reset --soft HEAD~1
  diffc = "!f() { git diff \"$1\"..\"$(git symbolic-ref --short HEAD)\"; }; f"
  br-parent = !git show-branch | grep "*" | grep -v "$(git rev-parse --abbrev-ref HEAD)" | head -n1 | sed "s/.*\\[\\(.*\\)\\].*/\\1/" | cut -d" " -f1
  sus = !b=$(git symbolic-ref --short HEAD) && git branch --set-upstream-to=origin/$b $b
  dbak="!f() { git diff --name-only $(git symbolic-ref --short HEAD)..bak/$(git symbolic-ref --short HEAD); }; f"
  mreb = "!f() { git dbb; git checkout $1 && git plc && git col && git cbb && git rebase $1; }; f"
  mws = "!f() { \
    BRANCH=\"$1\"; \
    git merge --squash \"$BRANCH\"; \
    TMP_FILE=$(mktemp); \
    echo \"Merged $BRANCH\" > \"$TMP_FILE\"; \
    echo \"\" >> \"$TMP_FILE\"; \
    echo \"Commits from $BRANCH:\" >> \"$TMP_FILE\"; \
    git log \"$BRANCH\" --pretty=format:'- %s%n%b' $(git merge-base HEAD \"$BRANCH\")..\"$BRANCH\" >> \"$TMP_FILE\"; \
    git commit --file=\"$TMP_FILE\"; \
    rm \"$TMP_FILE\"; \
  }; f"
  mlws = "!f() { \
    LAST=$(git rev-parse --abbrev-ref @{-1}); \
    echo \"Merging last branch: $LAST\"; \
    git -c alias.mws=\"$(git config alias.mws)\" mws \"$LAST\"; \
    }; f"
[core]
	editor = nvim
  pager = delta
  autocrlf = input  # keep newlines as in input
  compression = 9  # trade cpu for network
  fsync = none
  whitespace = error  # threat incorrect whitespace as errors

[advice]  # disable advices
  addEmptyPathspec = false
  pushNonFastForward = false
  statusHints = false

[blame]
  coloring = highlightRecent
  date = relative

[diff]
  context = 3  # less context in diffs
  renames = copies  # detect copies as renames in diffs
  interHunkContext = 10  # merge near hunks in diffs
[init]
	defaultBranch = main
[safe]
	directory = /home/trueerp/frappe-bench/apps/doc_appointments
[interactive]
  diffFilter = delta --color-only
[delta]
  navigate = true
  blame-palette = ["#1f2129", "#1c1e26", "#181a21", "#2a2d3a", "#333748"]  # Dark muted tones
  commit-decoration-style = box ul
  dark = true
  file-decoration-style = "#aab2ce"   # Muted gray-blue
  file-style = "#aab2ce"
  hunk-header-decoration-style = box ul
  hunk-header-file-style = bold
  hunk-header-line-number-style = bold "#8a93ab"  # Muted dark gray-blue
  hunk-header-style = file line-number syntax
  line-numbers-left-style = "#656c82"  # Dark gray
  line-numbers-minus-style = bold "#b3525b"  # Dark muted red
  line-numbers-plus-style = bold "#6c946e"   # Dark muted green
  line-numbers-right-style = "#656c82"
  line-numbers-zero-style = "#656c82"
  minus-emph-style = bold syntax "#a94449"  # Darker red for emphasis
  minus-style = syntax "#8a3a3f"            # Very dark muted red
  plus-emph-style = bold syntax "#507750"   # Darker green for emphasis
  plus-style = syntax "#3e5e3e"            # Very dark muted green
  map-styles = bold purple => syntax "#4e445c", bold blue => syntax "#39475a", bold cyan => syntax "#3b505d", bold yellow => syntax "#524f48"
  line-numbers = true
[rerere]
	enabled = true

[log]
  abbrevCommit = true  # short commits
  graphColors = blue,yellow,cyan,magenta,green,red
[status]
  branch = true
  short = true
  showStash = true
  showUntrackedFiles = all  # show individual untracked files
[push]
  autoSetupRemote = true  # easier to push new branches
  followTags = true  # push also tags
[pull]
  ff = only
[submodule]
  fetchJobs = 16
[rebase]
  autoStash = true
# URL shortcuts
[url "git@github.com:"]
    insteadOf = "gh:"

[url "git@github.com:itse4elhaam/dotfiles.git"]
    insteadOf = "el:"
